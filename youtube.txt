# handlers/youtube_handler.py
#
# This module handles the processing of YouTube links posted to a designated Discord channel.
# It extracts video IDs from YouTube URLs, retrieves video details using the YouTube API,
# and creates discussion threads for each video.
#
# The module performs the following key functions:
# 1. Detects YouTube URLs in Discord messages using regex pattern matching
# 2. Extracts the unique video ID from the URL
# 3. Fetches video metadata (title, description, thumbnail) from YouTube API
# 4. Creates a dedicated thread for discussion about the video
# 5. Embeds the video with rich formatting and interactive elements
# 6. Tracks already processed videos to prevent duplicates

# Import required libraries
import os                      # For accessing environment variables
import discord                 # Main Discord API library for bot functionality
from discord.ui import Button, View  # UI components for interactive buttons
from googleapiclient.discovery import build  # Google API client for YouTube API access
from googleapiclient.errors import HttpError  # Exception handling for YouTube API errors
import re                      # Regular expressions for URL pattern matching
import asyncio                 # Asynchronous programming support
from dotenv import load_dotenv # For loading environment variables from .env file

# Load environment variables from .env file
load_dotenv()  # This loads variables from a .env file into environment variables
YOUTUBE_API_KEY = os.getenv('YOUTUBE_API_KEY')  # Get the YouTube API key from environment variables

# Initialize YouTube API client with the API key
# This creates a service object that will be used to make API calls to YouTube Data API v3
youtube = build('youtube', 'v3', developerKey=YOUTUBE_API_KEY)

# Regular expression pattern for matching YouTube URLs
# This pattern matches both standard youtube.com URLs and shortened youtu.be URLs
# The pattern captures the 11-character video ID in a capture group
YOUTUBE_REGEX = r'(?:https?://)?(?:www\.)?(?:youtube\.com/watch\?v=|youtu\.be/)([a-zA-Z0-9_-]{11})'

# Store processed video IDs in memory to avoid duplicates in the same session
# This replaces the database functionality for checking duplicates
# Using a set data structure for O(1) lookup time when checking for duplicates
# The set will persist only during the bot's runtime - videos will be reprocessed after restart
processed_videos = set()

async def get_youtube_video_details(video_id):
    """Retrieve video details from the YouTube API."""
    try:
        # Create a request to the YouTube API for the video's snippet information
        # The snippet contains basic metadata like title, description, and thumbnails
        request = youtube.videos().list(part="snippet", id=video_id)
        
        # Execute the API request and get the response
        response = request.execute()
        
        # Check if the response contains any items (videos)
        # If the video ID is valid, the API will return data in the 'items' list
        if response['items']:
            # Extract the snippet data from the first (and only) item
            video_data = response['items'][0]['snippet']
            
            # Return a dictionary with the relevant video details
            # This dictionary will be used to create Discord embeds
            return {
                'title': video_data['title'],  # The video title
                'description': video_data['description'],  # The video description
                'thumbnail': video_data['thumbnails']['high']['url']  # URL to high-quality thumbnail
            }
        # If no items were found, the video ID is invalid or the video was removed
        return None
    except HttpError as e:
        # Handle YouTube API-specific errors (like quota exceeded, invalid requests)
        print(f"YouTube API error: {e}")
        return None
    except Exception as e:
        # Handle any other unexpected errors
        print(f"Error getting video details: {e}")
        return None

async def handle_youtube(message):
    """Process YouTube links, creating discussion threads."""
    # Extract the text content from the Discord message
    content = message.content

    # Search for YouTube URLs in the message content using the regex pattern
    # findall returns a list of all matches, with each match being the video ID captured in the regex group
    youtube_matches = re.findall(YOUTUBE_REGEX, content)
    if youtube_matches:
        # Extract the first video ID found in the message
        # We only process the first YouTube link even if multiple are present
        video_id = youtube_matches[0]
        try:
            # Fetch the video details from YouTube API using the extracted video ID
            # This is an asynchronous call that returns title, description, and thumbnail URL
            video_details = await get_youtube_video_details(video_id)
            if video_details:
                # Check if video has already been processed this session
                # This prevents duplicate threads if the same video is posted multiple times
                if video_id in processed_videos:
                    # Inform the user that this video was already posted
                    await message.reply(f"This video has already been posted recently.")
                    return  # Exit the function early
                
                # Add the current video ID to the processed videos set
                # This marks it as processed for future duplicate checks
                processed_videos.add(video_id)
                
                # Create a thread name using the video title
                # Limit the title to 50 characters for readability
                thread_name = f"Watch: {video_details['title'][:50]}"
                # Discord has a 100 character limit for thread names
                # If the thread name is too long, truncate it and add ellipsis
                if len(thread_name) > 100:
                    thread_name = thread_name[:97] + "..."

                # Create a temporary message and thread
                try:
                    # First send a temporary message to the channel
                    # This message will be the parent for the thread we create
                    temp_msg = await message.channel.send("Starting video thread...")
                    
                    # Create a thread attached to the temporary message
                    # The thread will be named after the video title
                    thread = await temp_msg.create_thread(name=thread_name)
                except discord.Forbidden as e:
                    # Handle permission errors (bot needs 'Manage Threads' permission)
                    print(f"Permission error creating thread: {e}")
                    # Inform the user about the missing permission
                    await message.reply("‚ö†Ô∏è Bot lacks permissions to create threads. Please ensure the bot has 'Manage Threads' permission in this channel.")
                    return  # Exit the function early

                # Create a rich embed with video details
                # Discord embeds are special formatted messages with enhanced visual elements
                embed = discord.Embed(
                    title=video_details['title'],  # Use the video title as the embed title
                    # Truncate description to 200 characters if it's too long
                    description=video_details['description'][:200] + '...' if len(video_details['description']) > 200 else video_details['description'],
                    color=discord.Color.red()  # Set the embed color to YouTube's red
                )
                
                # Add the video thumbnail as the main image
                # This displays the high-quality thumbnail from YouTube in the embed
                embed.set_image(url=video_details['thumbnail'])
                
                # Create a view with a button that will open the video
                # Views are containers for interactive components like buttons
                view = discord.ui.View()
                # Create a button that links directly to the YouTube video
                # The button has a play icon, green color, and the YouTube URL
                button = discord.ui.Button(label="‚ñ∂Ô∏è Watch Video", style=discord.ButtonStyle.success, url=f"https://www.youtube.com/watch?v={video_id}")
                # Add the button to the view container
                view.add_item(button)
                
                # Send the embed with the view to the thread
                # This posts the rich embed with the video details and watch button
                await thread.send(embed=embed, view=view)
                
                # Send the YouTube URL in a way that Discord will auto-embed the video
                # The angle brackets (<>) tell Discord to embed the video player directly in the chat
                # This allows users to watch the video without leaving Discord
                video_message = await thread.send(f"<https://www.youtube.com/watch?v={video_id}>")
                
                # Add a reaction to the video message to encourage interaction
                # This adds a thumbs up reaction to start engagement with the video
                try:
                    await video_message.add_reaction("üëç")
                except discord.Forbidden:
                    # Handle permission errors (bot needs 'Add Reactions' permission)
                    print(f"Permission error adding reaction to message: {video_message.id}")
                
                # Send a final message in the main channel
                # This creates a message with a link to the newly created thread
                final_message = f"Video posted in: {thread.mention}"
                # Delete the temporary "Starting video thread..." message
                await temp_msg.delete()
                # Send the final message with the thread link to the original channel
                await message.channel.send(final_message)
                
                # Delete the original message containing the YouTube link
                # This keeps the channel clean by removing the raw URL
                try:
                    await message.delete()
                except discord.Forbidden:
                    # Handle permission errors (bot needs 'Manage Messages' permission)
                    print(f"Permission error deleting message: {message.id}")

        except Exception as e:
            print(f"Error handling YouTube link: {e}")
            await message.reply("Failed to process YouTube link.")
            # Clean up if thread was created
            if 'thread' in locals():
                await thread.delete()